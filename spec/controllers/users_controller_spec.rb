require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all users as @users" do
      user = User.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:users)).to eq([user])
    end
  end

  describe "GET #show" do
    before :each do
      @fake_id = "1"
      @fake_user = double("fake_user", :name => "Fake User", :id => @fake_id)
    end
    it "determines which user to show" do
      expect(User).to receive(:find).with(@fake_id).and_return(@fake_user)
      get :show, :id => @fake_id
    end
  end

  describe "GET #new" do
    it "assigns a new user as @user" do
      get :new, {}, valid_session
      expect(assigns(:user)).to be_a_new(User)
    end
  end

  describe "GET #edit" do
    before :each do
      @fake_id = "1"
      @fake_user = double("fake_user", :name => "Fake User", :id => @fake_id)
    end
    it "determines which user to edit" do
      expect(User).to receive(:find).with(@fake_id).and_return(@fake_user)
      get :show, :id => @fake_id
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}, valid_session
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end

      it "redirects to the created user" do
        post :create, {:user => valid_attributes}, valid_session
        expect(response).to redirect_to(User.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        post :create, {:user => invalid_attributes}, valid_session
        expect(assigns(:user)).to be_a_new(User)
      end

      it "re-renders the 'new' template" do
        post :create, {:user => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => new_attributes}, valid_session
        user.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        expect(response).to redirect_to(user)
      end
    end

    context "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => invalid_attributes}, valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end
  
  describe '#generate_matches' do
    before :each do
      @id1 = 33
      @id2 = 44
      @id3 = 55
      @id4 = 66
      @name1 = "abc1"
      @name2 = "abc2"
      @name3 = "abc3"
      @name4 = "abc4"
      @email1 = 'abc1@gmail.com'
      @email2 = 'abc2@gmail.com'
      @email3 = 'abc3@gmail.com'
      @email4 = 'abc4@gmail.com'
      @user1 = FactoryGirl.create(:user, name: @name1, id: @id1, email: @email1, 
                                go_to_bed: "early", wake_up: "early",
                                smoke: false, drink: true,
                                party: true, loud_music: true,
                                messy_or_clean: "clean")
      @user2 = FactoryGirl.create(:user, name: @name2, id: @id2, email: @email2, 
                                go_to_bed: "early", wake_up: "early",
                                smoke: false, drink: true,
                                party: true, loud_music: true,
                                messy_or_clean: "clean")
      @user3 = FactoryGirl.create(:user, name: @name3, id: @id3, email: @email3, 
                                go_to_bed: "late", wake_up: "early",
                                smoke: true, drink: true,
                                party: true, loud_music: false,
                                messy_or_clean: "clean")
      @user4 = FactoryGirl.create(:user, name: @name4, id: @id4, email: @email4, 
                                go_to_bed: "early", wake_up: "early",
                                smoke: false, drink: true,
                                party: true, loud_music: true,
                                messy_or_clean: "clean")
    end
   
    it 'should :generate_matches for the logged_in_user' do
          post :generate_matches, logged_in_user: @id1
          @user1.reload
          expect(@user1.matches).to contain_exactly(@user2.name, @user4.name)
          #post :generate_matches, logged_in_user: @id1
      end
    
  end
  
  describe '#view_matches' do
     before :each do
      @id1 = 33
      @id2 = 44
      @id3 = 55
      @id4 = 66
      @name1 = "abc1"
      @name2 = "abc2"
      @name3 = "abc3"
      @name4 = "abc4"
      @email1 = 'abc1@gmail.com'
      @email2 = 'abc2@gmail.com'
      @email3 = 'abc3@gmail.com'
      @email4 = 'abc4@gmail.com'
      @user1 = FactoryGirl.create(:user, name: @name1, id: @id1, matches: [], email: @email1)
      @user2 = FactoryGirl.create(:user, name: @name2, id: @id2, matches: [@name3, @name4], email: @email2)
      @user3 = FactoryGirl.create(:user, name: @name3, id: @id3, matches: [@name2], email: @email3)
      @user4 = FactoryGirl.create(:user, name: @name4, id: @id4, matches: [@name2], email: @email4)
    end
       it 'should render the :view_matches template' do
          get :view_matches, logged_in_user: @id1
          expect(response).to render_template("view_matches")
       end
       describe "if the user already has matches" do
        it "should find all the correct matches for this user" do
            get :view_matches, logged_in_user: @id2
            expect(assigns(:matches)).to contain_exactly(@user3, @user4)
          end
        end
        describe "if the user doesn't already have matches" do
          it "should not find any matches" do
            get :view_matches, logged_in_user: @id1
            expect(assigns(:matches)).to be_empty
        end
     end
   end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, {:id => user.to_param}, valid_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      user = User.create! valid_attributes
      delete :destroy, {:id => user.to_param}, valid_session
      expect(response).to redirect_to(users_url)
    end
  end

  describe "#send_survey" do
    before :each do
      @id1 = 33
      @name1 = "abc1"
      @email1 = 'abc1@gmail.com'
      @user1 = double(:user, name: @name1, id: @id1, email: @email1)
    end
    it "updates user info" do
      #fill_in 'go_to_bed', :with => 'early'
      post :send_survey, user: @user1
      expect(@user1.go_to_bed).to eq("early")
    end
  end
  
end
